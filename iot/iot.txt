#include <ESP8266WiFi.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"
#define in1 5   //D1
#define in2 4   //D2
/************************* WiFi Access Point *********************************/
#define WLAN_SSID       "Ravi"
#define WLAN_PASS       "ravi3399"
/************************* Adafruit.io Setup *********************************/
#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883                   // use 8883 for SSL
#define AIO_USERNAME    "ravi3399"
#define AIO_KEY         "77287ece71c84ec690ed49bfdd747ab7"
/************ Global State (you don't need to change this!) ******************/
// Create an ESP8266 WiFiClient class to connect to the MQTT server.
WiFiClient client;
// or... use WiFiFlientSecure for SSL
//WiFiClientSecure client;
// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);
/****************************** Feeds ***************************************/
// Setup a feed called 'photocell' for publishing.
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname>
//Adafruit_MQTT_Publish photocell = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/test");

// Setup a feed called 'onoff' for subscribing to changes.
Adafruit_MQTT_Subscribe lightsbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/lights");
/*************************** Sketch Code ************************************/

// Bug workaround for Arduino 1.6.6, it seems to need a function declaration
// for some reason (only affects ESP8266, likely an arduino-builder bug).
void MQTT_connect();

void setup() {
  Serial.begin(115200);
  delay(10);

  Serial.println(F("Adafruit MQTT demo"));

  // Connect to WiFi access point.
  Serial.println(); Serial.println();
  Serial.print("Connecting to ");
  Serial.println(WLAN_SSID);

  WiFi.begin(WLAN_SSID, WLAN_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
   Serial.println();
 
  Serial.println("WiFi connected");
  Serial.println("IP address: "); Serial.println(WiFi.localIP());
 pinMode(in1,OUTPUT);
 pinMode(in2,OUTPUT);

 digitalWrite(in1,LOW);
 
 digitalWrite(in2,LOW);
 // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&lightsbutton);
 
}
uint32_t x=0;
void loop() {
  // Ensure the connection to the MQTT server is alive (this will make the first
  // connection and automatically reconnect when disconnected).  See the MQTT_connect
  // function definition further below.
  MQTT_connect();
  // this is our 'wait for incoming subscription packets' busy subloop
  // try to spend your time here
 Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription())) {
     if(subscription == &lightsbutton)
    {
      Serial.print(F("Got_lights: "));
      Serial.println((char *)lightsbutton.lastread);
      int lights_state = atoi((char *)lightsbutton.lastread);

      Serial.print(F("Got_lights: "));
      Serial.println((char *)lightsbutton.lastread);
      String RAW = (char *)lightsbutton.lastread;
      int i=0;
      if(RAW.charAt(i) != '_')
      i++;
      String pin = RAW.substring(0,i);
      //Serial.println(pin);
      int pin_number = pin.toInt();
      Serial.println(pin_number);
if(pin_number == 1)
      {Serial.println("lights are on");
           digitalWrite(in1,HIGH);
            digitalWrite(in2,HIGH);
      }
      if(pin_number == 2)
      {
        for(int i=0;i<10;i++)
        {
        Serial.println("lights are blinking");
           digitalWrite(in1,HIGH);
            digitalWrite(in2,LOW);
            delay(500);
            digitalWrite(in1,LOW);
            digitalWrite(in2,LOW);
            delay(500);
      }
      }
      if(pin_number == 0)
      {Serial.println("lights are off");
           digitalWrite(in1,LOW);
            digitalWrite(in2,LOW);
      }
      }
  }
  // ping the server to keep the mqtt connection alive
  // NOT required if you are publishing once every KEEPALIVE seconds
  /*
  if(! mqtt.ping()) {
    mqtt.disconnect();
  }
  */
}
// Function to connect and reconnect as necessary to the MQTT server.
// Should be called in the loop function and it will take care if connecting.
void MQTT_connect() {
  int8_t ret;

  // Stop if already connected.
  if (mqtt.connected()) {
    return;
  }

  Serial.print("Connecting to MQTT... ");

  uint8_t retries = 3;
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
       Serial.println(mqtt.connectErrorString(ret));
       Serial.println("Retrying MQTT connection in 5 seconds...");
       mqtt.disconnect();
       delay(5000);  // wait 5 seconds
       retries--;
       if (retries == 0) {
         // basically die and wait for WDT to reset me
         while (1);
       }
  }
  Serial.println("MQTT Connected!");
}
